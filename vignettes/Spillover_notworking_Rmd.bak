### Calculating spillover from single colour controls

Another way to calculate spillover is by using a set of single colour controls. This is generally a part of experiment/instrument set up before acquisition begins.

Generally, there ought to be the same number of single colour controls as the number of markers being assessed + 1 unstained to estimate the background autofluoresence of cells.

The dataset that we are primarily going to be working with (i.e. [FR-FCM-Z5PC](https://flowrepository.org/public_experiment_representations/5932)) did not come with a set of control files to generate the spillover matrix. So for demonstration purposes, we will use single colour controls from a different dataset [FR-FCM-ZZ36](https://flowrepository.org/id/FR-FCM-ZZ36).

```{r}
has_fixed_paths = FALSE
```


```{r generating_spillover_with_controls, echo=TRUE, eval = has_fixed_paths, message=FALSE}
# required libraries
library(flowCore)

# load sample fcs files
ff <- read.FCS("data/FlowRepository_FR-FCM-ZZ36_files/pbmc_luca.fcs")

# load csv identifying the mapping of control files
control_files <- read.csv("data/FlowRepository_FR-FCM-ZZ36_files/control_files.csv",row.names = 1)

# load the set of compensation files
comp_frames <- lapply(file.path("data", "FlowRepository_FR-FCM-ZZ36_files",control_files[["filename"]]), # example of using lapply to read in FCS files into a list
                      read.FCS) 
names(comp_frames) <- control_files[["channel"]]

# convert to flowSet
comp_fs <- as(comp_frames,"flowSet")


# quick visualization of what the control files contain
all_control_af488 <- ggcyto::as.ggplot(ggcyto(comp_fs,
                                      aes(x = "FSC-A", y = "Alexa Fluor 488-A"))+
                                      geom_hex(bins = 256)+
                                      theme_bw()+
                                      scale_y_flowCore_fasinh(b = 1/150)+
                                      labs(title = "Detection of Alexa Fluor 488 in all control samples "))

# calculate spillover
## using spillover from flowStats
spill <- flowStats::spillover(comp_fs,
                   unstained = "Unstained", # indicate how the unstained file is named in flowset
                   patt = "-A", # indicate which parameter should be considered 
                   fsc = "FSC-A",
                   ssc = "SSC-A",
                   stain_match = "regexpr",useNormFilt = TRUE)
```

Now, let's visualize the spill matrix that we calculated.

[NOTE: This needs to be corrected in the flowStats package. Normalization is with respect to the max value and not with respect to the intended channel.]

```{r viz_calculated_spill, eval=has_fixed_paths, echo=FALSE}
pheatmap::pheatmap(mat = spill,
                   cluster_rows = F,
                   cluster_cols = F,
                   color = colorRampPalette(c("black","orange","cyan","magenta"))(100),
                   display_numbers = T, 
                   legend = FALSE,
                   number_color = "white",
                   number_format = "%.3f")
```

*Note: "Close or related fluorophores will have some degree of overlap"*

Lastly, we check the effect of *compensating* the files.

```{r show_comp_effect, echo=T, eval=has_fixed_paths}
# read in FCS
ff <- read.FCS("data/FlowRepository_FR-FCM-ZZ36_files/pbmc_luca.fcs")
trans <- flowCore::transformList(from = setdiff(sampleNames(comp_fs),"Unstained"),
                                 tfun = flowCore::arcsinhTransform(b = 1/150)
                                 )
ff_trans <- transform(ff,trans) # transformation defined above

# plot pre-compensation
pre_compensation <- as.ggplot(autoplot(ff_trans,          # autoplot can be used to generate plots rapidly
                                       x = "PE-Cy5-5-A", 
                                       y = "PE-Cy5-A", 
                                       bins = 256)+
                                labs(title = "Uncompensated data"))

# compensate
ff_comp <- compensate(ff,final)
ff_comp <- transform(ff_comp,trans)

# plot post-compensation
post_compensation <- as.ggplot(autoplot(ff_comp,
                                       x = "PE-Cy5-5-A", 
                                       y = "PE-Cy5-A", 
                                       bins = 256)+
                                 labs(title = "Compensated data"))

gridExtra::grid.arrange(pre_compensation, 
                        post_compensation, 
                        nrow = 1)
```

## Transformation and visualization

Cytometry data tends to have a very high dynamic range. For example: the range of values in PE-Cy5-5-A channel in the FCS we have been working with is `r range(ff)[,"PE-Cy5-5-A", drop = FALSE]`. The difference between cells that do not express a marker of interest and a cell that expresses variable level of marker could be order of magnitude difference. In such a scenario, transformation of the data can aid in better visualization and representation of the biological phenomenan.

There are multiple approaches to transform the data in `cytoverse`. We will identify a few common ones as well as demonstrate how to create new transformations.

First, let's visualize why transformation is necessary.

```{r transformation_demo, eval=FALSE, echo=FALSE, message=FALSE}
library(shiny)
ff <- read.FCS("data/fcs_data/4000_BDC-CR1.fcs")
ff <- compensate(ff, spillover(ff)[[3]])
channels <- markernames(ff)[setdiff(colnames(ff),c(paste("FSC-",c("A","W","H"),sep = ""),
                           paste("SSC-",c("A","W","H"),sep = ""),
                             "Time"))]
names(channels) = NULL
transformations <- c("inverse hyperbolic sin", "biexponential","log","No transformation")
log_trans <- flowWorkspace::flowjo_log_trans()
transformation_list <- list("biexponential" = list("x-axis" = scale_x_flowjo_biexp(),
                                                            "y-axis" = scale_y_flowjo_biexp()),
                            "inverse hyperbolic sin" = list("x-axis" = scale_x_flowjo_fasinh(),
                                                            "y-axis" = scale_y_flowjo_fasinh()),
                             "logicle" = list("x-axis" = scale_x_logicle(),
                                                            "y-axis" = scale_y_logicle()),
                            "log" = list("x-axis" = scale_x_continuous(name = "log_trans_x",
                                                                       breaks = log_trans$breaks,trans = log_trans
                                                                       ),
                                         "y-axis" = scale_y_continuous(name = "log_trans_y",
                                                                       breaks = log_trans$breaks,trans = log_trans
                                                                       )),
                            "No transformation" = list("x-axis" = scale_x_continuous(),
                                         "y-axis" = scale_y_continuous()))
plot_transformation <- function(flowFrame, transformation,channels = NULL){
  physical_parameters <- c(paste("FSC-",c("A","W","H"),sep = ""),
                           paste("SSC-",c("A","W","H"),sep = ""),
                             "Time")
  #fluor.channels <- colnames(flowFrame)[colnames(flowFrame %in% physical_parameters)]
  trans <- transformation_list[[transformation]]
  if(!is.null(channels)){
    transformed_plot <- 
      autoplot(
      flowFrame, 
      x = channels[1],
      y = channels[2],
      bins = 256
    )+
      trans[[1]]+
      trans[[2]]+
      theme(axis.text = element_text(face = "bold", colour = "red"),
           )+
      labs(title = "Data has been compensated")
    transformed_plot
  }
}
shinyApp(
  ui = fluidPage(
    selectInput(inputId = "transformation",
                label = "Select Transformation",choices = transformations,selected = "No transformation",multiple = FALSE),
    selectInput(inputId = "channels_x",
                label = "X-axis",
                choices = channels,
                selected = channels[1],
                multiple = FALSE),
    selectInput(inputId = "channels_y",
                label = "Y_axis",
                choices = channels,
                selected = channels[2],
                multiple = FALSE),
    plotOutput("ggcyto")
  ),
  
  server = function(input, output){
    output$ggcyto = 
      renderPlot({
        plot_transformation(flowFrame = ff,transformation = input$transformation,channels = c(input$channels_x,input$channels_y))
      },height = 400,width = 400)
  }
  ,
  options = list(height = 700)
  
)


```

```{r demo_transformations, echo=FALSE, eval=has_fixed_paths, fig.width=10, fig.height=10}
ff <- read.FCS("data/fcs_data/4000_BDC-CR1.fcs")
ff <- compensate(ff, spillover(ff)[[3]])

no_transform <- as.ggplot(autoplot(ff,
         x = "CD14",
         y = "HLA-DR",
         bins = 256)+
  labs(title = "No transformation applied"))

biexp <- as.ggplot(autoplot(ff,
         x = "CD14",
         y = "HLA-DR",
         bins = 256)+
  scale_x_flowjo_biexp()+
  scale_y_flowjo_biexp()+
  labs(title = "Biexponential transformation"))

log_trans <- as.ggplot(autoplot(ff,
         x = "CD14",
         y = "HLA-DR",
         bins = 256)+
  scale_x_continuous(trans = flowWorkspace::flowjo_log_trans())+
  scale_y_continuous(trans = flowWorkspace::flowjo_log_trans())+
  labs(title = "Log transformation"))

asinh_t <- as.ggplot(autoplot(ff,
         x = "CD14",
         y = "HLA-DR",
         bins = 256)+
  scale_x_flowjo_fasinh()+
  scale_y_flowCore_fasinh()+
  labs(title = "inverse hyperbolic sine transformation"))

logicle <- as.ggplot(autoplot(ff,
         x = "CD14",
         y = "HLA-DR",
         bins = 256)+
  scale_x_logicle()+
  scale_y_logicle()+
  labs(title = "Logicle transformation"))

gridExtra::grid.arrange(no_transform,
                        biexp, 
                        log_trans,
                        asinh_t, 
                        logicle, 
                        nrow = 2,
                        bottom = "Generic transformations of compensated data")
```

As we see, the variety of transformations aids in visualization and interpretation of the data.

Steps to transform FCS data

-   `cytoverse` libraries: `flowWorkspace` and `flowCore` have a multiple commonly used transformations as well, one can also create a custom transformation if required.

```{r how_to_transform_builtin, echo=T, eval=has_fixed_paths, message=F}
# transforming using cytoverse functions
# define a transformation

asinh_trans <- flowWorkspace::asinh_Gml2(T = sinh(1)*500,M = 0.4)
# create a transformList that indicates which parameters to transform
my_trans_list <- flowCore::transformList(from = names(markernames(ff)),
                                         tfun = asinh_trans)


# transform 
ff_transformed <- flowCore::transform(ff, my_trans_list)

# visualize
ff_comp <- as.ggplot(
  autoplot(ff,
           x = "CD14", 
           y = "HLA-DR",
           bins = 256)
)

ff_comp_transformed <- as.ggplot(
  autoplot(ff_transformed,
           x = "CD14",
           y = "HLA-DR",
           bins = 256)
)

gridExtra::grid.arrange(ff_comp, ff_comp_transformed, nrow = 1)

```

User defined transformation.

```{r user_defined_transformation,echo=TRUE,eval=has_fixed_paths}
# define a transformation
my_trans <- function(x){
  return(sqrt(abs(x)))
}

# create a transformList
my_trans_list <- flowCore::transformList(from = names(markernames(ff)), 
                                         tfun = my_trans)

# transform
ff_transformed <- transform(ff, my_trans_list)

# visualize
ff_comp_transformed <- as.ggplot(
  autoplot(ff_transformed,
           x = "CD14",
           y = "HLA-DR",
           bins = 256)
)

gridExtra::grid.arrange(ff_comp, ff_comp_transformed, nrow = 1)

```

Transforming a set of FCS files

```{r transform_flowset, echo=TRUE, eval=has_fixed_paths}
# read in a flowSet
fs <- flowCore::read.flowSet(path = "../../../data/fcs_data/",pattern = "BDC-CR1") # read in a set of FCS files as flowSet

# compensate
fs <- fsApply(fs, function(x){ # fsApply will return a the same object as input
              spill = spillover(x)[[3]]
              compensate(x,spillover = spill)
            })

# using asinh_trans defined previously
my_trans_list <- flowCore::transformList(from = names(markernames(ff)),
                                         tfun = asinh_trans)
# using the same approach as shown previously
fs_transformed <- transform(fs, my_trans_list)

# visualize
fs_raw <- as.ggplot(autoplot(fs, # autoplot being used to plot a flowSet
                   x = "CD14",
                   y = "HLA-DR",
                   bins = 256)+
                   labs(title = "Untransformed flowSet"))

fs_trans <- as.ggplot(autoplot(fs_transformed,
                     x = "CD14",
                     y = "HLA-DR",
                     bins = 256)+
                     labs(title = "Transformed flowSet"))

gridExtra::grid.arrange(fs_raw, fs_trans, nrow = 1)
```

Transformation of `cytoset` takes a path.

```{r trans_cytoset, echo=TRUE, eval=has_fixed_paths}
# load a cytoset from fcs files
cs <- flowWorkspace::load_cytoset_from_fcs(path = "data/fcs_data/",pattern = "BDC-CR1")

# compensate
spill <- spillover(cs[[1]])[[3]] 
cs <- compensate(cs, spill)

# transform: this will transform the underlying data 
transform(cs,my_trans_list)
```
